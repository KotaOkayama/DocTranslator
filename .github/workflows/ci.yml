name: CI/CD Pipeline

# トリガーイベントを定義
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # 手動実行も可能に

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pytest pytest-cov flake8 black mypy

    - name: Install LibreOffice
      run: |
        sudo apt-get update
        sudo apt-get install -y libreoffice libreoffice-writer libreoffice-java-common

    - name: Create necessary directories
      run: |
        mkdir -p uploads downloads logs
        chmod 777 uploads downloads logs

    - name: Create test environment file
      run: |
        cat > .env << EOF
        GENAI_HUB_API_KEY=test_key
        DEBUG=true
        LOG_LEVEL=debug
        PYTHONUNBUFFERED=1
        EOF

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 app/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 app/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check formatting with black
      run: |
        black --check app/ tests/ || true

    - name: Type checking with mypy
      run: |
        mypy app/ --ignore-missing-imports || true

    - name: Run tests with pytest
      run: |
        pytest --cov=app tests/ --cov-report=xml -v || true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  docker:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        echo "Building Docker image..."
        docker build -t doctranslator:test -f docker/Dockerfile .
        echo "Docker image built successfully"
        docker images

    - name: Create test environment
      run: |
        echo "Creating test environment..."
        # Create directories
        mkdir -p uploads downloads logs
        chmod 777 uploads downloads logs
        
        # Create environment file
        cat > .env.test << EOF
        GENAI_HUB_API_KEY=test_key
        DEBUG=true
        LOG_LEVEL=debug
        PYTHONUNBUFFERED=1
        EOF

    - name: Start and test container
      run: |
        echo "Starting container..."
        # Start container
        docker run --rm -d \
          -p 8000:8000 \
          --env-file .env.test \
          -v "$(pwd)/uploads:/app/uploads" \
          -v "$(pwd)/downloads:/app/downloads" \
          -v "$(pwd)/logs:/app/logs" \
          --name test-container \
          doctranslator:test
        
        echo "Initial container status:"
        docker ps -a
        
        # Wait for container to initialize
        echo "Waiting for container initialization..."
        sleep 5
        
        echo "Container logs after 5 seconds:"
        docker logs test-container || true
        
        # Check if container is still running
        if ! docker ps | grep test-container; then
          echo "Container stopped unexpectedly. Logs:"
          docker logs test-container || true
          exit 1
        fi
        
        # Wait for application to be ready
        echo "Waiting for application to be ready..."
        for i in {1..30}; do
          if curl -s http://localhost:8000/health > /dev/null; then
            echo "Application is ready!"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "Application failed to start. Logs:"
            docker logs test-container
            exit 1
          fi
          echo "Attempt $i: Waiting for application..."
          sleep 1
        done
        
        # Test endpoints
        echo "Testing endpoints..."
        echo "Testing health endpoint..."
        curl -v http://localhost:8000/health
        
        echo "Testing status endpoint..."
        curl -v http://localhost:8000/api/status
        
        echo "Testing models endpoint..."
        curl -v http://localhost:8000

  release-and-publish:
    runs-on: ubuntu-latest
    needs: [test, docker]  # テストとDockerビルドが成功した後に実行
    # mainブランチへのpushの場合のみ実行
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # すべての履歴を取得

      - name: Get latest tag
        id: get_tag
        run: |
          # 最新のタグを取得（存在しない場合はv0.0.0）
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Determine version bump
        id: version_bump
        run: |
          # コミットメッセージを取得
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          
          # タグからバージョン番号を抽出
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r Z Y X <<< "$VERSION"
          
          # デフォルト値設定
          Z=${Z:-0}
          Y=${Y:-0}
          X=${X:-0}
          
          # コミットメッセージからバージョン指定を確認
          if [[ $COMMIT_MSG =~ \[major\] ]] || [[ $COMMIT_MSG =~ \[z\] ]]; then
            Z=$((Z + 1))
            Y=0
            X=0
            BUMP_TYPE="メジャーバージョンアップ"
          elif [[ $COMMIT_MSG =~ \[minor\] ]] || [[ $COMMIT_MSG =~ \[y\] ]]; then
            Y=$((Y + 1))
            X=0
            BUMP_TYPE="マイナーバージョンアップ"
          else
            X=$((X + 1))
            BUMP_TYPE="パッチバージョンアップ"
          fi
          
          NEW_TAG="v$Z.$Y.$X"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "version=$Z.$Y.$X" >> $GITHUB_OUTPUT
          echo "New version: $NEW_TAG ($BUMP_TYPE)"

      - name: Create and push tag
        run: |
          NEW_TAG="${{ steps.version_bump.outputs.new_tag }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a $NEW_TAG -m "Release $NEW_TAG"
          git push origin $NEW_TAG

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version_bump.outputs.new_tag }}
          release_name: Release ${{ steps.version_bump.outputs.new_tag }}
          body: |
            ## ${{ steps.version_bump.outputs.bump_type }}
            
            ### マージ内容
            ${{ github.event.head_commit.message }}
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.get_tag.outputs.latest_tag }}...${{ steps.version_bump.outputs.new_tag }}
          draft: false
          prerelease: false

      # ghcr.ioへのログインと公開
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ steps.version_bump.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.version_bump.outputs.version }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      # 追加: QEMUのセットアップ（マルチアーキテクチャビルド用）
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 修正: マルチアーキテクチャ対応のビルド設定
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
